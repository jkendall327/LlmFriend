@using LLMFriend.Services
@inject IJSRuntime JS
@inject ChatService ChatService

<div class="chat-container">
    <div class="chat-header">
        <button class="close-chat-button" @onclick="OnClose">Close</button>
    </div>
    <div class="chat-feed" @ref="_chatFeedDiv">
        @foreach (var message in _messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "assistant-message")">
                <div class="message-content">@message.Content</div>
            </div>
        }
        @if (_isTyping)
        {
            <div class="message assistant-message typing-indicator">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        }
    </div>
    
    <div class="input-container">
        <input type="text" 
               @bind="_currentMessage" 
               @bind:event="oninput"
               @onkeypress="@HandleKeyPress"
               placeholder="Type your message..."
               class="message-input" />
        <button @onclick="SendMessage" class="send-button">Send</button>
    </div>
</div>

<script>
    window.scrollToBottom = (element) => {
        setTimeout(() => {
            element.scroll({ top: element.scrollHeight, behavior: 'smooth' });
        }, 100);
    }
</script>

@code {
    private List<ChatMessage> _messages = new();
    private string _currentMessage = "";
    private ElementReference _chatFeedDiv;
    private bool _isTyping;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", _chatFeedDiv);
        }
        catch
        {
            // Ignore any JavaScript interop errors
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessage))
            return;

        var userMessage = _currentMessage;
        _currentMessage = "";

        // Add user message
        _messages.Add(new ChatMessage { Content = userMessage, IsUser = true });
        await ScrollToBottom();

        // Show typing indicator
        _isTyping = true;
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // Get streaming response from ChatService
            await StreamResponse(ChatService.GetStreamingResponseAsync(userMessage, _messages.Count == 1));
        }
        finally
        {
            _isTyping = false;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public bool IsComplete { get; set; } = true;
    }

    private async Task StreamResponse(IAsyncEnumerable<string> responseStream)
    {
        var assistantMessage = new ChatMessage { Content = "", IsUser = false, IsComplete = false };
        _messages.Add(assistantMessage);
        await ScrollToBottom();

        await foreach (var chunk in responseStream)
        {
            assistantMessage.Content += chunk;
            StateHasChanged();
            await ScrollToBottom();
        }

        assistantMessage.IsComplete = true;
        StateHasChanged();
    }
}

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        height: 80vh;
    }

    .chat-header {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
    }

    .close-chat-button {
        padding: 5px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        background-color: #dc3545;
        color: white;
    }

    .close-chat-button:hover {
        background-color: #c82333;
    }

    .chat-feed {
        flex-grow: 1;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .message {
        margin: 10px 0;
        padding: 10px;
        border-radius: 10px;
        max-width: 80%;
    }

    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
    }

    .assistant-message {
        background-color: #f0f0f0;
        margin-right: auto;
    }

    .input-container {
        display: flex;
        gap: 10px;
    }

    .message-input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .send-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .send-button:hover {
        background-color: #0056b3;
    }

    .typing-indicator {
        padding: 15px;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
    }

    .typing-dots span {
        width: 8px;
        height: 8px;
        background: #666;
        border-radius: 50%;
        animation: bounce 1.3s linear infinite;
    }

    .typing-dots span:nth-child(2) {
        animation-delay: 0.15s;
    }

    .typing-dots span:nth-child(3) {
        animation-delay: 0.3s;
    }

    @@keyframes bounce {
        0%, 60%, 100% {
            transform: translateY(0);
        }
        30% {
            transform: translateY(-4px);
        }
    }
</style>
