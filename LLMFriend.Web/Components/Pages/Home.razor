@page "/"
@using LLMFriend.Web.Services
@using LLMFriend.Services
@rendermode InteractiveServer
@implements IDisposable
@inject ChatNotificationService NotificationService

<PageTitle>LLM Friend</PageTitle>

<div class="chat-management">
    @if (!_chats.Any())
    {
        <button class="new-chat-button" @onclick="@(() => CreateNewChat())">Start New Chat</button>
    }
    else
    {
        <button class="new-chat-button" @onclick="@(() => CreateNewChat())">New Chat</button>
    }
</div>

@foreach (var chat in _chats)
{
    <ChatInterface @key="chat.Id" OnClose="@(() => CloseChat(chat.Id))" InvocationContext="chat.Context" />
}

<style>
    .chat-management {
        max-width: 800px;
        margin: 20px auto;
        display: flex;
        justify-content: center;
    }

    .new-chat-button {
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        background-color: #28a745;
        color: white;
    }

    .new-chat-button:hover {
        background-color: #218838;
    }
</style>

@code {
    private readonly List<ChatInstance> _chats = [];
    
    private class ChatInstance
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public InvocationContext? Context { get; set; }
    }
    private CancellationTokenSource? _cts;

    protected override Task OnInitializedAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            _cts = new();
            _ = MonitorNotificationsAsync(_cts.Token);
        }
        
        return Task.CompletedTask;
    }

    private async Task MonitorNotificationsAsync(CancellationToken cancellationToken)
    {
        try
        {
            var reader = NotificationService.GetReader();
            while (await reader.WaitToReadAsync(cancellationToken))
            {
                while (reader.TryRead(out var notification))
                {
                    await InvokeAsync(() =>
                    {
                        CreateNewChat(notification.Context);
                        StateHasChanged();
                    });
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Normal shutdown
        }
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    private void CreateNewChat(InvocationContext? context = null)
    {
        _chats.Add(new ChatInstance { Context = context });
    }

    private void CloseChat(Guid chatId)
    {
        var chat = _chats.Single(s => s.Id == chatId);
        _chats.Remove(chat);
    }
}
