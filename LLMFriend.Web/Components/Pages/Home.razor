@page "/"
@using LLMFriend.Web.Services
@using LLMFriend.Services
@rendermode InteractiveServer
@implements IDisposable
@inject ChatNotificationService NotificationService

<PageTitle>LLM Friend</PageTitle>

<div class="chat-management">
    <div class="notification-settings">
        <label class="checkbox-container">
            <input type="checkbox" @bind="PlaySoundNotifications" />
            <span class="checkbox-label">Play Sound</span>
        </label>
        <label class="checkbox-container">
            <input type="checkbox" @bind="ShowBrowserNotifications" />
            <span class="checkbox-label">Browser Notifications</span>
        </label>
    </div>
    
    @if (!_chats.Any())
    {
        <button class="new-chat-button" @onclick="@(() => CreateNewChat())">Start New Chat</button>
    }
    else
    {
        <button class="new-chat-button" @onclick="@(() => CreateNewChat())">New Chat</button>
    }
</div>

@foreach (var chat in _chats)
{
    <ChatInterface 
        @key="chat.Id" 
        OnClose="@(() => CloseChat(chat.Id))" 
        InvocationContext="chat.Context"
        PlaySoundNotifications="chat.PlaySoundNotifications"
        ShowBrowserNotifications="chat.ShowBrowserNotifications" />
}

<style>
    .chat-management {
        max-width: 800px;
        margin: 20px auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
    }

    .notification-settings {
        display: flex;
        gap: 20px;
        margin-bottom: 10px;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .checkbox-label {
        margin-left: 5px;
    }

    .new-chat-button {
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        background-color: #28a745;
        color: white;
    }

    .new-chat-button:hover {
        background-color: #218838;
    }
</style>

@code {
    private readonly List<ChatInstance> _chats = [];
    
    private class ChatInstance
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public InvocationContext? Context { get; set; }
        public bool PlaySoundNotifications { get; set; } = true;
        public bool ShowBrowserNotifications { get; set; } = true;
    }
    private CancellationTokenSource? _cts;
    
    // Notification settings
    private bool _playSoundNotifications = true;
    private bool _showBrowserNotifications = true;
    
    public bool PlaySoundNotifications
    {
        get => _playSoundNotifications;
        set
        {
            _playSoundNotifications = value;
            UpdateNotificationSettings();
        }
    }
    
    public bool ShowBrowserNotifications
    {
        get => _showBrowserNotifications;
        set
        {
            _showBrowserNotifications = value;
            UpdateNotificationSettings();
        }
    }
    
    private void UpdateNotificationSettings()
    {
        if (RendererInfo.IsInteractive)
        {
            _ = InvokeAsync(async () =>
            {
                await Js.InvokeVoidAsync("localStorage.setItem", "playSoundNotifications", _playSoundNotifications);
                await Js.InvokeVoidAsync("localStorage.setItem", "showBrowserNotifications", _showBrowserNotifications);
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            _cts = new();
            _ = MonitorNotificationsAsync(_cts.Token);
            
            // Load notification settings from localStorage
            try
            {
                var playSoundValue = await Js.InvokeAsync<string>("localStorage.getItem", "playSoundNotifications");
                var showNotificationsValue = await Js.InvokeAsync<string>("localStorage.getItem", "showBrowserNotifications");
                
                if (!string.IsNullOrEmpty(playSoundValue))
                {
                    _playSoundNotifications = playSoundValue.ToLowerInvariant() == "true";
                }
                
                if (!string.IsNullOrEmpty(showNotificationsValue))
                {
                    _showBrowserNotifications = showNotificationsValue.ToLowerInvariant() == "true";
                }
            }
            catch
            {
                // Ignore any JavaScript interop errors
            }
        }
    }

    private async Task MonitorNotificationsAsync(CancellationToken cancellationToken)
    {
        try
        {
            var reader = NotificationService.GetReader();
            while (await reader.WaitToReadAsync(cancellationToken))
            {
                while (reader.TryRead(out var notification))
                {
                    await InvokeAsync(() =>
                    {
                        CreateNewChat(notification.Context);
                        StateHasChanged();
                    });
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Normal shutdown
        }
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    private void CreateNewChat(InvocationContext? context = null)
    {
        var chat = new ChatInstance { Context = context };
        chat.PlaySoundNotifications = _playSoundNotifications;
        chat.ShowBrowserNotifications = _showBrowserNotifications;
        _chats.Add(chat);
    }

    private void CloseChat(Guid chatId)
    {
        var chat = _chats.Single(s => s.Id == chatId);
        _chats.Remove(chat);
    }
}
